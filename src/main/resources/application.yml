server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
    gateway:
      httpclient:
        connect-timeout: 2000 # Time limit for a connection to be established
        response-timeout: 5s #  Time limit for a response to be received
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession # Ensures the session gets saved before forwarding request downstream
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10 # Number of tokens dripped in the bucket each second
              burstCapacity: 20 # Allows up to 20 requests bursts
              requestedTokens: 1 # The cost of tokens for one request
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR # Retries only when 5XX errors
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException # Retries only when these exceptions thrown
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false # Retries with a relay computed as "firstBackoff * (factor ^n)"
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker # Name of the circuit breaker
                fallbackUri: forward:/catalog-fallback # When the circuit is open request is forwarded to this URI
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker # No fallback is defined for this circuit breaker
              args:
                name: orderCircuitBreaker
#        - id: catalog-service
#          # If the env var isn't defined the first part after : will be used so for this it would be = http://localhost:9001
#          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
#          predicates:
#            - Path=/books/**
#        - id: order-route
#          # If the env var isn't defined the first part after : will be used so for this it would be = http://localhost:9002
#          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
#          predicates:
#            - Path=/orders/**
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  session:
    store-type: redis
    timeout: 10m # Default is 30 min
    redis:
      namespace: polar:edge

resilience4j:
  circuitbreaker:
    configs:
      default: # Default config bean for all circuit breakers
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      default:
        timeout-duration: 5s # This timeout takes precedence over Netty configured timeout
logging:
  level:
    io.github.resilience4j: debug